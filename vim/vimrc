set nocompatible    "使用vim键位

set t_Co=256    " 启用256色

" 安装vim-plug作为插件管理器
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
call plug#begin()
Plug 'tpope/vim-surround'
Plug 'Raimondi/delimitMate'
Plug 'mattn/emmet-vim'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'
Plug 'easymotion/vim-easymotion'
call plug#end()

""""""""""""""""""""""""""""""""""""""""""""
"""""""""""NERDCommenter""""""""""""""""""""
let g:NERDSpaceDelims = 1   " 在注释符之后增加一个空格

""""""""""""""""""""""""""""""""""""""""""""
"""""""""""NERDTree"""""""""""""""""""""""""
let g:NERDTreeNodeDelimiter = "\u00a0" " 使用no break space作为分隔符,解决mac下^G问题
autocmd VimEnter * NERDTree            " 进入vim后自动显示NERDTree
autocmd VimEnter * wincmd p            " 显示NERDTree后，将焦点定位到前一个可显示的panel
autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif   " 如果:q后只剩一个NERDTree则直接退出vim


set showmode    " 在底部显示当前处于的模式
set showcmd     " 在底部显示当前的指令操作
set modifiable  " 允许更改缓冲区

set mouse=a     " 支持使用鼠标

""""""""""""""""""""""""""""""""""""""""""""
" 设置UTF8
set encoding=utf-8
set fileencodings=utf-8,gbk,cp936
set fileencoding=utf-8
""""""""""""""""""""""""""""""""""""""""""""

syntax on   " 打开语法高亮。自动识别代码，使用多种颜色显示
filetype on " 文件类型检测
filetype plugin on  " 文件类型插件自动检测加载
filetype indent on  " 文件类型缩进自动检测

set number  " 显示行号
set relativenumber  " 显示相对行号

""""""""""""""""""""""""""""""""""""""""""""
" 配置tab行为
set expandtab   " 将tab扩展为空格键
set tabstop=4   " tab为2个空格
set softtabstop=4   " 编辑模式时，缩进的长度
set shiftwidth=4    " 在文本上按`>>`、`<<`或者`==`时，每一级的字符数
set autoindent  " 自动缩进
set smartindent " 智能缩进
set cindent " 使用C类型的缩进
""""""""""""""""""""""""""""""""""""""""""""

set foldmethod=syntax   " 基于缩进或语法进行代码折叠
set nofoldenable    " 启动 vim 时关闭折叠代码


" 外观界面
" 深色背景
" set background=dark
set laststatus=2    " 显示状态栏
" 设置状态栏显示的数据
function! FileSize()
    let bytes = getfsize(expand("%:p"))
    if bytes <= 0
        return ""
    endif
    if bytes < 1024
        return bytes
    elseif bytes < 1024*1024
        return (bytes/1024) . "K"
    else
        return (bytes/1024/1024) . "M"
    endif
endfunction
set statusline=%t\ %m%r\    "文件名 文件状态
set statusline+=[%{strlen(&fenc)?&fenc:'none'}] "文件编码
set statusline+=\ %{FileSize()}
set statusline+=%=[HEX:%B]
set statusline+=\ %-21(%11(%l/%L%),%-3v\ %P%)

set hlsearch    " 高亮显示搜索结果
set incsearch   " 实时跳转到搜索到的位置
set ignorecase  " 忽略大小写

""""""""""""""""""""""""""""""""""""""""""""
" vim 备份文件行为
" 修改undodir为~/.vim/undodir
if has('persistent_undo')
    silent call system('mkdir -p ~/.vim/undodir > /dev/null 2>&1')
    set undodir=~/.vim/undodir
    set undofile
endif
" 修改swapfile的目录为~/.vim/swapdir
silent call system('mkdir -p ~/.vim/swapdir > /dev/null 2>&1')
set directory=~/.vim/swapdir
set swapfile

set nobackup        " 不创建备份文件

""""""""""""""""""""""""""""""""""""""""""""

set noerrorbells    " 出错时，不发出响声    
set history=1000    " 记住1000次历史操作
